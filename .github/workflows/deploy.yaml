name: Deploy to Amazon ECS

on:
  push:
    branches:
      - github-action

env:
  AWS_REGION: us-east-1                 
  ECR_REPOSITORY: awsomedemo          
  ECS_SERVICE: awsome-women-service                
  ECS_CLUSTER: awsome-women-community-summit-2023               
  ECS_TASK_DEFINITION: ./.github/workflows/task-definition.json 
  CONTAINER_NAME: awswomen           

permissions:
  actions: read
  contents: read
  security-events: write                                              

jobs:
  Init:
    name: üìç Installs Dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '16'
    - run: npm install

  Test:
    name: üïØ Unit Test
    runs-on: ubuntu-latest
    needs: [Init]
    steps:
    - uses: actions/checkout@v3  
    - uses: actions/setup-node@v3
      with:
        node-version: '16'
    - run: npm run test   

  Security:
    name: üêõ Security Trivy Scan
    needs: [Test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build an image from Dockerfile
        run: |
          docker build -t trivy-image:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'trivy-image:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
  Semgrep:
    name: üêõ Semgrep scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    needs: [Test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Run semgrep security scanner
        continue-on-error: true
        run: |
          cat << 'EOF' | bash
              semgrep ci --config=auto --sarif --output=semgrep.sarif --max-target-bytes=2MB
              EXIT_CODE=$?
              if [ "$EXIT_CODE" = "0" ] || [ "$EXIT_CODE" = "1" ]
              then
                exit 0
              else
                exit $EXIT_CODE
              fi
          EOF
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'semgrep.sarif'   

  deploy:
    name: Deploy to ECS üöÄ
    runs-on: ubuntu-latest
    environment: develop
    needs: [Security,Semgrep]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          VERSION=`jq -r '.version' ./package.json`
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true